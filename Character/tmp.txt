
// void CharacterBase::update() {
//     DataCenter* DC = DataCenter::get_instance();
    
//     //是否被凍住
//     update_freeze();

//     if (Speed_timer <= 0){
//         Speed_timer = 0;
//         speed_bias = 0;
//     }else{
//         Speed_timer -= 1;
//     }
//     if (Atk_timer <= 0){
//         Atk_timer = 0;
//         Atk_bias = 0;
//     }else{
//         Atk_timer -= 1;
//     }
//     if (Hp_timer <= 0) Hp_timer = 0;
//     else Hp_timer -= 1 / 60.0;

//      // **防止在 SHIELD 狀態下水平移動**
//      double now_speed = (is_slow_down)? 2:(speed+speed_bias);
//     if (state != CharacterState::SHIELD) {
//         // 水平移動處理（即使在攻擊狀態下仍允許移動）
//         if (DC->key_state[key_right]) {
//             shape->update_center_x(shape->center_x() + now_speed);
//             is_facing_left = false; // 面向右
//             if (!is_attacking && !is_jumping) {
//                 set_state(CharacterState::WALK);
//             }
//         } else if (DC->key_state[key_left]) {
//             shape->update_center_x(shape->center_x() - now_speed);
//             is_facing_left = true; // 面向左
//             if (!is_attacking && !is_jumping) {
//                 set_state(CharacterState::WALK);
//             }
//         } else if (!is_attacking && !is_jumping && !is_hurting) {
//             set_state(CharacterState::STOP); // 停止狀態
//         }
//     }
//     // 攻擊狀態計時
//     if (is_attacking) {
//         attack_timer -= 1.0 / 60.0; // 減少攻擊計時器
//         if (attack_timer <= 0) {
//             is_attacking = false; // 攻擊結束
//             set_state(CharacterState::STOP); // 返回停止狀態
//         }
//     }
//     // 處理攻擊按鍵
//     // 攻擊和防禦邏輯處理（按鍵對應不同動畫）
//     if (!is_attacking) {
//         if (DC->key_state[key_attack1]) {
//             set_state(CharacterState::ATTACK1);
//             is_attacking = true;
//             attack_timer = attack_duration; // 設定 ATTACK1 動畫持續時間
//             Rage += 5; // 若打到應該會加更多
//         } else if (DC->key_state[key_attack2]) {
//             set_state(CharacterState::ATTACK2);
//             is_attacking = true;
//             attack_timer = attack_duration; // 設定 ATTACK2 動畫持續時間
//             Rage += 5;
//         } else if (DC->key_state[key_attack3]) {
//             set_state(CharacterState::ATTACK3);
//             is_attacking = true;
//             attack_timer = attack_duration; // 設定 ATTACK3 動畫持續時間
//             Rage += 5;
//         } else if (DC->key_state[key_shield]) {
//             set_state(CharacterState::SHIELD);
//             is_attacking = true;
//             attack_timer = shield_duration; // 設定防禦持續時間
//             //Rage += 10; // 同樣，若成功阻擋加更多
//         }
//     }
//     Rage = std::min(Rage, (double)100);

//     // 處理跳躍邏輯
//     if (is_jumping) {
//         // 更新垂直速度（加入重力影響）
//         vertical_velocity += gravity * (1.0 / 60.0); // 假設 60FPS
//         shape->update_center_y(shape->center_y() + vertical_velocity); // 根據速度更新垂直位置

//         // 檢查是否到達地面
//         if (shape->center_y() >= ground_level) {
//             shape->update_center_y(ground_level); // 修正位置到地面
//             is_jumping = false;                  // 停止跳躍狀態
//             vertical_velocity = 0;               // 重置速度
//             set_state(CharacterState::STOP);    // 回到停止狀態
//         }
//     }

//     // 處理跳躍按鍵
//     if (!is_jumping && DC->key_state[key_jump]) {
//         is_jumping = true;
//         vertical_velocity = -jump_initial_velocity; // 跳躍初速度（負值表示向上）
//         set_state(CharacterState::JUMP);  // 切換到跳躍狀態
//     } 


//     if (is_hurting) {
//         hurt_timer -= 1.0 / 60.0; // 減少攻擊計時器
//         //printf("hurt: timer %f\n",hurt_timer);
//         if (hurt_timer <= 0) {
//             is_hurting = false; // 攻擊結束
//             set_state(CharacterState::STOP); // 返回停止狀態
//         }
//     }
//     if (is_slow_down){
//         slow_down_timer -= 1.0 / 60.0;
//         if (slow_down_timer <= 0){
//             is_slow_down = false;
//         }
//     }

//     if (is_poisoned){
//         poison_timer -= 1;
//         if (poison_timer <= 0){
//             is_poisoned = false;
//         }
//         if ((int)poison_timer%2)
//             HP -= 0.1;
//     }

//     // 更新滑行過程
//     if (sliding) {
//         update_knockback();
//         slide_timer -= 1.0 / 60.0; // 減少攻擊計時器
//         //printf("hurt: timer ")
//         if (hurt_timer <= 0) {
//             sliding = false; // 攻擊結束
//             set_state(CharacterState::STOP); // 返回停止狀態
//         } 
//     }

//     float current_x = shape->center_x();
//     if (current_x < 0) {
//         shape->update_center_x(0); // 修正到左邊界
//     } else if (current_x > 1600) {
//         shape->update_center_x(1600); // 修正到右邊界
//     }
// }